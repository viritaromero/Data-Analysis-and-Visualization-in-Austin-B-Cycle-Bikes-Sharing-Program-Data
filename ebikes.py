# -*- coding: utf-8 -*-
"""eBikes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xyFmnnm37ygIH0f_J4m5J09OU0bUGYRS

# Analyzing Austin B-Cycle bicycle sharing program Data

This dataset contains trips and kiosk location data from the Austin B-Cycle bicycle sharing program.

# **Importing libraries**
"""

!pip install wordcloud
!pip install nltk
import numpy as np
import pandas as pd 
from collections import defaultdict
import matplotlib.pyplot as plt
import seaborn as sns
import re
import nltk
nltk.download('punkt')
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from math import log, sqrt
# %matplotlib inline
plt.style.use('ggplot')

reviews = pd.read_csv('AustinB-Cycle_yelpreviews.csv')
reviews.head()

review_words = ' '.join(map(str,list(reviews['review-content'])))
reviews_wc = WordCloud(width = 512,height = 512).generate(review_words)
plt.figure(figsize = (10, 8), facecolor = 'k')
plt.imshow(reviews_wc)
plt.axis('off')
plt.tight_layout(pad = 0)
plt.show()

"""# Loading the data: Trips and Kiosks Locations"""

ebikes = pd.read_csv('Austin_B-Cycle_Trips.csv')
ebikes.head()

ebikes_locations = pd.read_csv('Austin_B-Cycle_Kiosk_Locations.csv')
ebikes_locations.head(8)

ebikes.info()

ebikes_locations.info()

"""# Most Popular Checkout Kiosks"""

ebikes['Checkout Kiosk'].value_counts()

Checkout_Kiosk = ['21st & Speedway @PCL','Riverside @ S. Lamar','City Hall / Lavaca & 2nd','2nd & Congress','5th & Bowie','Rainey St @ Cummings']

Checkout_Kiosks = dict((x,0) for x in Checkout_Kiosk)
for i in Checkout_Kiosk:
    x = ebikes['Checkout Kiosk'].str.contains(i).sum()
    if i in Checkout_Kiosk:
        Checkout_Kiosks[i] = x
        
print(Checkout_Kiosks)

Checkout_Kiosk_locations = sorted(Checkout_Kiosks.items(), key=lambda x: x[1], reverse=True)
Checkout_Kiosk = pd.DataFrame(Checkout_Kiosk_locations,columns=['Checkout_Kiosk','Count'])
Checkout_Kiosk['Count'] = Checkout_Kiosk.Count.astype('int')
Checkout_Kiosk

Checkout_Kiosk.plot.barh(x='Checkout_Kiosk',y='Count',legend=False)
plt.title('Most Popular Checkout Kiosks',fontsize=18)
plt.xlabel('Count')
plt.gcf().set_size_inches(11.7, 8.27)

"""# Most Popular Return Kiosks"""

ebikes['Return Kiosk'].value_counts()

Return_Kiosk = ['21st & Speedway @PCL','City Hall / Lavaca & 2nd','2nd & Congress','Riverside @ S. Lamar','4th & Congress','Convention Center / 4th St. @ MetroRail']

Return_Kiosks = dict((x,0) for x in Return_Kiosk)
for i in Return_Kiosk:
    x = ebikes['Return Kiosk'].str.contains(i).sum()
    if i in Return_Kiosk:
        Return_Kiosks[i] = x
        
print(Return_Kiosks)

Return_Kiosk_locations = sorted(Return_Kiosks.items(), key=lambda x: x[1], reverse=True)
Return_Kiosk = pd.DataFrame(Return_Kiosk_locations,columns=['Return_Kiosk','Count'])
Return_Kiosk['Count'] = Return_Kiosk.Count.astype('int')
Return_Kiosk

Return_Kiosk.plot.barh(x='Return_Kiosk',y='Count',legend=False)
plt.title('Most Popular Return Kiosks',fontsize=16)
plt.xlabel('Count')
plt.gcf().set_size_inches(11.7, 8.27)

"""# Most Popular Memberships Type"""

ebikes['Membership Type'].value_counts()

import seaborn as sns
sns.countplot('Membership Type', data=ebikes, order=pd.value_counts(ebikes['Membership Type']).iloc[:7].index)
plt.suptitle('Most Popular Membership Type')
plt.gcf().set_size_inches(14.7, 10.27)

"""# Dates with most activity"""

ebikes['Checkout Date'].value_counts()

import seaborn as sns
sns.countplot('Checkout Date', data=ebikes, order=pd.value_counts(ebikes['Checkout Date']).iloc[:7].index)
plt.suptitle('Dates with Most Activity')
plt.gcf().set_size_inches(14.7, 10.27)

"""# Kiosk Locations in a heatmap"""

import folium
from folium import plugins
import pandas as pd
import matplotlib.pyplot as plt

ebikes_locations.head()

m = folium.Map([30.27193, -97.73854], zoom_start=13)
m

# mark each station as a point
for index, row in ebikes_locations.iterrows():
    folium.CircleMarker([row['Latitude'], row['Longitude']],
                        radius=15,
                        popup=row['Kiosk Name'],
                        fill_color="#3db7e4", # divvy color
                       ).add_to(m)

# convert to (n, 2) nd-array format for heatmap
stationArr = ebikes_locations[['Latitude', 'Longitude']].as_matrix()

# plot heatmap
m.add_children(plugins.HeatMap(stationArr, radius=15))
m

ebikes.describe()

ebikes_locations.describe()

ebikes['Trip Duration Minutes'].describe()

"""# Kiosks Status"""

ebikes_locations['Kiosk Status'].value_counts()

Kiosk_Status = ['active','closed']

Kiosks_Status = dict((x,0) for x in Kiosk_Status)
for i in Kiosk_Status:
    x = ebikes_locations['Kiosk Status'].str.contains(i).sum()
    if i in Kiosks_Status:
        Kiosks_Status[i] = x
        
print(Kiosks_Status)

Kiosk_Status = sorted(Kiosks_Status.items(), key=lambda x: x[1], reverse=True)
Kiosk_Status = pd.DataFrame(Kiosk_Status,columns=['Kiosk_Status','Count'])
Kiosk_Status['Count'] = Kiosk_Status.Count.astype('int')
Kiosk_Status

Kiosk_Status.plot.barh(x='Kiosk_Status',y='Count',legend=False)
plt.title('Kiosks Status',fontsize=16)
plt.xlabel('Count')
plt.gcf().set_size_inches(11.7, 8.27)

"""# Active Kiosks in the heatmap"""

Active_Kiosks= ebikes_locations[ebikes_locations['Kiosk Status'].notnull() & (ebikes_locations['Kiosk Status'] == 'active')]

Active_Kiosks.head(75)

Active_Kiosks.info()

active_status = folium.Map([30.27193, -97.73854], zoom_start=16)
active_status

# mark each station as a point
for index, row in Active_Kiosks.iterrows():
    folium.CircleMarker([row['Latitude'], row['Longitude']],
                        radius=15,
                        popup=row['Kiosk Name'],
                        fill_color="#3db7e4", # divvy color
                       ).add_to(active_status)

# convert to (n, 2) nd-array format for heatmap
activeArr = Active_Kiosks[['Latitude', 'Longitude']].as_matrix()

# plot heatmap
active_status.add_children(plugins.HeatMap(stationArr, radius=15))
active_status

"""# Closed Kioks in the heatmap"""

Closed_Kiosks= ebikes_locations[ebikes_locations['Kiosk Status'].notnull() & (ebikes_locations['Kiosk Status'] == 'closed')]

Closed_Kiosks.head()
Closed_Kiosks.info()

Closed_Kiosks.head(19)

closed_status = folium.Map([30.27193, -97.73854], zoom_start=16)
closed_status

# mark each station as a point
for index, row in Closed_Kiosks.iterrows():
    folium.CircleMarker([row['Latitude'], row['Longitude']],
                        radius=15,
                        popup=row['Kiosk Name'],
                        fill_color="#3db7e4", # divvy color
                       ).add_to(closed_status)

# convert to (n, 2) nd-array format for heatmap
closedArr = Closed_Kiosks[['Latitude', 'Longitude']].as_matrix()

# plot heatmap
closed_status.add_children(plugins.HeatMap(stationArr, radius=15))
closed_status

"""# Months with most activity"""

ebikes['Month'].value_counts()

ebikes.Month.plot(kind='box')
plt.title('Month of the Trip')
plt.ylabel('Month')

import seaborn as sns
sns.countplot('Month',data=ebikes)
plt.suptitle('Most Popular Month for Trips')
plt.gcf().set_size_inches(11.7, 8.27)

"""As you can see, March and October are the months with most activiy. The reason could be that SXSW event it's every year on March and Austin City Limits occurs every year  between September and October, we can infer that people decide to go on the second weekend."""

checkout_return_kiosks= ebikes[['Checkout Kiosk','Return Kiosk', 'Trip Duration Minutes']]

checkout_return_kiosks.head(40)

"""# Trips with duration less than 2 Minutes"""

Small_Trips= ebikes[ebikes['Checkout Kiosk'].notnull() & (ebikes['Trip Duration Minutes'] < 2)]

Small_Trips.head(20)

"""# Days when these small trips were done"""

Small_Trips['Checkout Date'].value_counts()

Small_Trips.describe()

"""# Small Trips where Checkot and Return Kioks are the same"""

Small_Trips_Same= ebikes[ebikes['Checkout Kiosk'].notnull() & (ebikes['Trip Duration Minutes'] < 2) & (ebikes['Checkout Kiosk'] == ebikes['Return Kiosk'])]

Small_Trips_Same.info()

Small_Trips_Same.head()

Small_Trips_Same['Membership Type'].value_counts()

Small_Trips['Checkout Date'].value_counts()

import seaborn as sns
sns.countplot('Checkout Date', data=Small_Trips_Same, order=pd.value_counts(Small_Trips_Same['Checkout Date']).iloc[:6].index)
plt.suptitle('Dates with Most Frequency of Small trips and Checkout and Return Kiosk are the same')
plt.gcf().set_size_inches(11.7, 8.27)

"""I'm thinking that maybe on 03/02/2019, the system was not working"""

import seaborn as sns
sns.countplot('Checkout Kiosk', data=Small_Trips_Same, order=pd.value_counts(Small_Trips_Same['Checkout Kiosk']).iloc[:6].index)
plt.suptitle('Kiosks with Most Frequency of Small trips and Checkout and Return Kiosk are the same')
plt.gcf().set_size_inches(11.7, 8.27)

import seaborn as sns
sns.countplot('Checkout Time', data=Small_Trips_Same, order=pd.value_counts(Small_Trips_Same['Checkout Time']).iloc[:6].index)
plt.suptitle('Times with Most Frequency of Small trips and Checkout and Return Kiosk are the same')
plt.gcf().set_size_inches(11.7, 8.27)

"""It seem that the Kiosk clos to the UT had this problem.

# Large Trips
"""

Large_Trips= ebikes[ebikes['Checkout Kiosk'].notnull() & (ebikes['Trip Duration Minutes'] > 60)]

Large_Trips.head(15)

"""# Large Trips where Checkout and Return kiosk are the same"""

Large_Trips_Same_Kiosk= Large_Trips[Large_Trips['Checkout Kiosk'].notnull() & (Large_Trips['Checkout Kiosk'] == Large_Trips['Return Kiosk'])]

Large_Trips_Same_Kiosk.head(10)

"""When trips are larger than 60 Minutes an the checkout and return kiosk are the same, it may be users that park somwhere close to the kiosk and rent a bike to exercise"""

Morning_Trips= ebikes[ebikes['Checkout Kiosk'].notnull() & (ebikes['Checkout Time'] < '12:00:00')]

Morning_Trips.head(20)

import seaborn as sns
sns.countplot('Checkout Time', data=Morning_Trips, order=pd.value_counts(Morning_Trips['Checkout Time']).iloc[:6].index)
plt.suptitle('Morning Trips Times')
plt.gcf().set_size_inches(11.7, 8.27)

Afternoon_Trips= ebikes[ebikes['Checkout Kiosk'].notnull() & (ebikes['Checkout Time'] > '12:00:00')]

Afternoon_Trips.head()

Morning_Trips['Checkout Time'].value_counts()

import seaborn as sns
sns.countplot('Checkout Time', data=Afternoon_Trips, order=pd.value_counts(Afternoon_Trips['Checkout Time']).iloc[:6].index)
plt.suptitle('Afternoon Trips Times')
plt.gcf().set_size_inches(11.7, 8.27)

"""# Extracting the day of the week to analyze Weekends and Weekdays behaviour"""

ebikes_days= ebikes['Checkout Date'] = pd.to_datetime(ebikes['Checkout Date'])
ebikes_days = ebikes['day_of_week'] = ebikes['Checkout Date'].dt.dayofweek

days = {0:'Mon',1:'Tues',2:'Weds',3:'Thurs',4:'Fri',5:'Sat',6:'Sun'}

ebikes_days = ebikes['day_of_week'] = ebikes['day_of_week'].apply(lambda x: days[x])

ebikes_days.head()

"""# Day of the week most popular for trips"""

ebikes['day_of_week'].value_counts()

import seaborn as sns
sns.countplot('day_of_week',data=ebikes)
plt.suptitle('Most Popular Days for Trips')
plt.gcf().set_size_inches(11.7, 8.27)

"""You can see that weekends have more activity than weekdays. But, Monday has a high number. It may be because students go to the University on bycicle on Mondays.

# Most Popular Checkout Time
"""

ebikes['Checkout Time'].value_counts()

import seaborn as sns
sns.countplot('Checkout Time', data=ebikes, order=pd.value_counts(ebikes['Checkout Time']).iloc[:6].index)
plt.suptitle('Checkout Time Trips')
plt.gcf().set_size_inches(11.7, 8.27)

"""I'm trying to undertsand why the most popular trip times have '12 Minutes at the end. It can be the same type of member and it takes them 10 or 12 Minutes to arrive there and rent the bike. I don't find another reason.

# Analyzing Trips on Saturday
"""

Saturday_Trips= ebikes[ebikes['day_of_week'].notnull() & (ebikes['day_of_week'] =="Sat")]

Saturday_Trips.head()

Saturday_Trips['Checkout Kiosk'].value_counts()

import seaborn as sns
sns.countplot('Checkout Kiosk', data=Saturday_Trips, order=pd.value_counts(ebikes['Checkout Kiosk']).iloc[:6].index)
plt.suptitle('Most Popular Checkout Kiosks on Saturday Trips')
plt.gcf().set_size_inches(11.7, 8.27)

"""# Analyzing Trips on Monday"""

Monday_Trips= ebikes[ebikes['day_of_week'].notnull() & (ebikes['day_of_week'] =="Mon")]

Monday_Trips.head()

Monday_Trips['Checkout Kiosk'].value_counts()

import seaborn as sns
sns.countplot('Checkout Kiosk', data=Monday_Trips, order=pd.value_counts(ebikes['Checkout Kiosk']).iloc[:6].index)
plt.suptitle('Most Popular Checkout Kiosks on Monday Trips')
plt.gcf().set_size_inches(11.7, 8.27)

"""As I thought, The most poopular kioks on Mondays is the one located at 21st & Speedway @PCL, close to the UT."""

Monday_Trips['Checkout Time'].value_counts()

Saturday_Trips['Checkout Time'].value_counts()

"""# Most Popular Trip Duration in Minutes"""

ebikes['Trip Duration Minutes'].value_counts()

import seaborn as sns
sns.countplot('Trip Duration Minutes', data=ebikes, order=pd.value_counts(ebikes['Trip Duration Minutes']).iloc[:6].index)
plt.suptitle('Most Popular Trip Duration in Minutes')
plt.gcf().set_size_inches(11.7, 8.27)

"""The most popular trip duration in minutes are 5, 6, 4, 7, 8 and 9. I'm thinking that people may rent the bike to go and get lunch somewhere and that's the duration. Small trips from students or people at work."""

independence_day= ebikes[ebikes['Checkout Date'] == '02/14/2018']

independence_day['Return Kiosk'].value_counts()

acl_2018= ebikes[ebikes['Checkout Date'] == '10/07/2018']

acl_2018['Return Kiosk'].value_counts()

austin_events = pd.read_csv('Austin_Park_Ranger_Events_Calendar.csv')
austin_events.head(8)

import seaborn as sns
sns.countplot('Location Name', data=austin_events, order=pd.value_counts(austin_events['Location Name']).iloc[:6].index)
plt.suptitle('Locations')
plt.gcf().set_size_inches(16, 13)